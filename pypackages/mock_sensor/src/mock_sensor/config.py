"""Configuration classes for the mock sensor."""

from enum import StrEnum
from typing import Literal

from pydantic import BaseModel, Field, SecretStr, model_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class AuthSettings(BaseSettings):
    """Authentication settings for the mock sensor."""

    mqtt_hostname: str = Field(default="localhost")
    """The hostname of the MQTT broker. Defaults to "localhost".  Use an empty value to disable
    MQTT."""

    mqtt_port: int = Field(default=1883, ge=1, le=65535)
    """The port of the MQTT broker.  Defaults to 1883 if not specified.  Ignored if
    mqtt_hostname is empty."""

    mqtt_hmac_key: SecretStr = Field(default="mqtt-message-signing-key")
    """An HMAC key used to sign MQTT messages.  Ignored if mqtt_hostname is empty.  For simplicity,
    we set a default value even if MQTT is disabled."""

    mqtt_username: str | None = Field(default=None)
    """An optional username for MQTT authentication.  Ignored if mqtt_hostname is empty."""

    mqtt_password: str | None = Field(default=None)
    """An optional password for MQTT authentication.  Ignored if mqtt_hostname is empty."""

    model_config = SettingsConfigDict(
        extra="ignore",
        env_file_encoding="utf-8",
        case_sensitive=False,
    )


class MetricType(StrEnum):
    """The type of metric.  Corresponds to Python types.

    Perhaps assume float64 / signed int64 for typed languages?
    """

    FLOAT = "float"
    INT = "int"
    STR = "str"
    BOOL = "bool"


class MetricConfig(BaseModel):
    """A metric generated by our mock sensor.

    For our mock sensor, only float-type metrics are supported; however, the receiving system
    (e.g. MQTT broker, InfluxDB) may support other types.
    """

    # Fields used to catalog the metric

    name: str = Field(min_length=1)
    """A short name for the metric."""

    description: str
    """A longer description of the metric."""

    unit: str
    """The unit of the metric.  Note used for data generation/transmission/storage,
    but useful for documentation purposes.  Use an empty string for unitless or non-numeric
    metrics.
    """

    datatype: Literal[MetricType.FLOAT] = Field(default=MetricType.FLOAT)
    """The data type of the metric.  For our mock sensor, only float-type metrics are supported."""

    precision: int = Field(default=2, ge=0, le=6)
    """The number of decimal places to round the metric value to.  Defaults to 2.

    Must be 0 for non-float metrics.
    """

    ### Sender-only fields for the random walk generator ###

    initial_value: float
    """The initial value of the metric."""

    max_step: float = Field(ge=0)
    """The maximum step size for the metric."""

    min_value: float
    """The minimum value for the metric."""

    max_value: float
    """The maximum value for the metric."""

    @model_validator(mode="after")
    def check_values(self) -> "MetricConfig":
        """Validate the metric configuration."""
        if self.datatype != MetricType.FLOAT and not self.precision == 0:
            raise ValueError("precision must be 0 for non-float metrics")
        if self.min_value >= self.max_value:
            raise ValueError("min_value must be less than max_value")
        if not (self.min_value <= self.initial_value <= self.max_value):
            raise ValueError("initial_value must be between min_value and max_value")
        return self


class SensorConfig(BaseModel):
    """Configuration for the mock sensor.

    The sensor generates metrics at a specified interval.  Each metric is defined by a
    MetricConfig object.

    The sensor can publish metrics to an MQTT broker and/or write them to an InfluxDB database.
    """

    name: str
    """A short name for the sensor.

    For MQTT, this is appended to the `self.mqtt_config.topic_prefix` to form the full topic.  For
    InfluxDB, this is appended to `self.influx_config.measurement_prefix` to form the full
    measurement name.
    """

    description: str
    """A longer description of the sensor."""

    mqtt_topic: str = Field(default="test_sensor")
    """The MQTT topic to publish metrics to.  Defaults to `sensors/mock/test_sensor`.  Ignored if
    MQTT is disabled.
    """

    metrics: list[MetricConfig]
    """The list of metrics generated by the sensor."""

    interval: float = Field(default=30.0, gt=0)
    """The interval (in seconds) between metric generations."""
