"""Configuration classes for the mock sensor."""

from pydantic import BaseModel, Field, model_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class AuthSettings(BaseSettings):
    """Authentication settings for the mock sensor."""

    mqtt_hostname: str = Field(default="localhost")
    """The hostname of the MQTT broker. Defaults to "localhost".  Use an empty value to disable
    MQTT."""

    mqtt_username: str | None = None
    """An optional username for MQTT authentication."""

    mqtt_password: str | None = None
    """An optional password for MQTT authentication."""

    model_config = SettingsConfigDict(
        extra="ignore",
        env_file_encoding="utf-8",
        case_sensitive=False,
    )


class MetricConfig(BaseModel):
    """A metric generated by our mock sensor."""

    name: str = Field(min_length=1)
    """A short name for the metric."""

    description: str
    """A longer description of the metric."""

    unit: str
    """The unit of the metric.  Note used for data generation/transmission/storage,
    but useful for documentation purposes.
    """

    initial_value: float
    """The initial value of the metric."""

    max_step: float = Field(ge=0)
    """The maximum step size for the metric."""

    min_value: float
    """The minimum value for the metric."""

    max_value: float
    """The maximum value for the metric."""

    @model_validator(mode="after")
    def check_values(self) -> "MetricConfig":
        """Validate that min_value <= initial_value <= max_value."""
        if self.min_value >= self.max_value:
            raise ValueError("min_value must be less than max_value")
        if not (self.min_value <= self.initial_value <= self.max_value):
            raise ValueError("initial_value must be between min_value and max_value")
        return self


class MQTTConfig(BaseModel):
    """Configuration for MQTT client.

    For the Paho MQTT client, the connection is as follows:
    ```
        client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
        if username and password:
            client.username_pw_set(username, password)
        client.connect(url, port)
    ```
    """

    hostname: str = Field(default="localhost")
    """Host name of the MQTT broker. Defaults to "localhost"."""

    port: int = Field(default=1883)
    """The port of the MQTT broker. Defaults to 1883."""

    topic_prefix: str = Field(default="sensors/mock")
    """The topic prefix to use when publishing metrics.  Each metric appends its name to this
    prefix. Defaults to `sensors/mock`.
    """


class SensorConfig(BaseModel):
    """Configuration for the mock sensor.

    The sensor generates metrics at a specified interval.  Each metric is defined by a
    MetricConfig object.

    The sensor can publish metrics to an MQTT broker and/or write them to an InfluxDB database.
    """

    name: str
    """A short name for the sensor.

    For MQTT, this is appended to the `self.mqtt_config.topic_prefix` to form the full topic.  For
    InfluxDB, this is appended to `self.influx_config.measurement_prefix` to form the full
    measurement name.
    """

    description: str
    """A longer description of the sensor."""

    metrics: list[MetricConfig]
    """The list of metrics generated by the sensor."""

    mqtt_config: MQTTConfig | None = Field(default=None)
    """An optional MQTT client to publish metrics to."""

    interval: float = Field(default=30.0, gt=0)
    """The interval (in seconds) between metric generations."""


def example_config(name: str, mqtt: str) -> SensorConfig:
    """Return an example configuration for the mock sensor."""
    mqtt = mqtt.strip()
    return SensorConfig(
        name=name,
        description=f"A mock sensor named {name}",
        metrics=[
            MetricConfig(
                name="temperature",
                description="The temperature in degrees Celsius",
                unit="Â°C",
                initial_value=20.0,
                max_step=0.5,
                min_value=-10.0,
                max_value=40.0,
            ),
            MetricConfig(
                name="humidity",
                description="The relative humidity in percent",
                unit="%",
                initial_value=50.0,
                max_step=1.0,
                min_value=0.0,
                max_value=100.0,
            ),
        ],
        mqtt_config=MQTTConfig(hostname=mqtt) if mqtt else None,  # Use default MQTT settings
        interval=30.0,
    )
